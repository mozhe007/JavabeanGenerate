package javabean.generate.ui;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import javabean.generate.CommandOptions;
import javabean.generate.Constants;
import javabean.generate.bean.ConfBean;
import javabean.generate.bean.ConnectionBean;
import javabean.generate.bean.Table;
import javabean.generate.parse.GenerateJavaBean;
import javabean.generate.parse.Parse;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.prefs.Preferences;

/**
 * @author James
 */
public class JavabeanGenerateFrame extends javax.swing.JFrame {

    public static final int DEFAULT_WIDTH = 680;
    public static final int DEFAULT_HEIGHT = 540;
    final int CHECKBOX_COLUMN = 0;
    final int TABLENAME_COLUMN = 1;

    /**
     * Creates new form NewJFrame
     */
    public JavabeanGenerateFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(screenSize.width / 2 - DEFAULT_WIDTH / 2, screenSize.height
                / 2 - DEFAULT_HEIGHT / 2);
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JavabeanGenerate");
        //数据库
        dbLabel = new javax.swing.JLabel();
        dbLabel.setText("数据库：");
        dbComboBox = new javax.swing.JComboBox<>();
        dbComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Oracle", "MySql"}));

        //IP
        ipLabel = new javax.swing.JLabel();
        ipLabel.setText("IP：");
        ipTextField = new javax.swing.JTextField();

        //端口
        portLabel = new javax.swing.JLabel();
        portLabel.setText("端口(port)：");
        portTextField = new javax.swing.JTextField();

        //数据库名
        dbNameLabel = new javax.swing.JLabel();
        dbNameLabel.setText("数据库名：");
        dbNameTextField = new javax.swing.JTextField();

        //用户名
        userLabel = new javax.swing.JLabel();
        userLabel.setText("用户名：");
        userTextField = new javax.swing.JTextField();

        //密码
        pswLabel = new javax.swing.JLabel();
        pswLabel.setText("密码：");
        pswTextField = new javax.swing.JTextField();

        //包名
        packageLabel = new javax.swing.JLabel();
        packageLabel.setText("包名：");
        packageTextField = new javax.swing.JTextField();

        //导出路径
        pathLabel = new javax.swing.JLabel();
        pathLabel.setText("导出目录：");
        pathTextField = new javax.swing.JTextField();

        //数据库表名列表
        tableNamesScrollPane = new javax.swing.JScrollPane();
        model = new MyTableModel();
        tableNamesTable = new javax.swing.JTable(model);
        tableNamesTable.getTableHeader().setDefaultRenderer(new CheckHeaderCellRenderer(tableNamesTable));
        tableNamesScrollPane.setViewportView(tableNamesTable);

        //查询
        queryButton = new javax.swing.JButton();
        queryButton.setActionCommand("查询");
        queryButton.setText("查询");
        queryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queryButtonActionPerformed(evt);
            }
        });

        //创建
        createButton = new javax.swing.JButton();
        createButton.setText("创建");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(packageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dbNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pswLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(userLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(portLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dbLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ipLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(queryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(pathTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(pswTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(dbNameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(dbComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 124, Short.MAX_VALUE)
                                                        .addComponent(ipTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(portTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(userTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(packageTextField, javax.swing.GroupLayout.Alignment.LEADING))
                                                .addGap(40, 40, 40)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(130, 130, 130)
                                                .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(139, 139, 139))
                                        .addComponent(tableNamesScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(21, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(dbLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(dbComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(ipLabel))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(portLabel)
                                                        .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(23, 23, 23)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(dbNameLabel)
                                                        .addComponent(dbNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(userLabel)
                                                        .addComponent(userTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(pswLabel)
                                                        .addComponent(pswTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(packageLabel)
                                                        .addComponent(packageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(pathLabel)
                                                        .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(tableNamesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(queryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>

    private void queryButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //清空(可能存在历史查询结果)
        tableNamesTable.setModel(new MyTableModel());
        ConfBean confBean = getInputConf();
        this.setConfToPreferences(confBean);
        java.util.List<Table> tables = new Parse(
                new ConnectionBean(confBean.getHost(), confBean.getPort(), confBean.getDbName(),confBean.getUser(), confBean.getPasswd()))
                .getParseTables(confBean.getDb());
        int size = tables.size();
        Object tableArray[][] = new Object[size][2];
        for (int i = 0; i < tables.size(); i++) {
            tableArray[i][CHECKBOX_COLUMN] = new Boolean(false);
            tableArray[i][TABLENAME_COLUMN] = tables.get(i);
        }
        MyTableModel reloadMyTableModel = new MyTableModel();
        reloadMyTableModel.setData(tableArray);
        tableNamesTable.setModel(reloadMyTableModel);
    }

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {
        ConfBean confBean = getInputConf();
        java.util.List<Table> selectedTables = ((MyTableModel)tableNamesTable.getModel()).getSelectedTables();
        try {
            java.util.List<File> outFiles = new GenerateJavaBean(selectedTables).generate(new File(confBean.getDir()), confBean.getPkg());
            for(File outFile : outFiles){
                System.out.println(outFile);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 获取界面上的用户输入信息
    public ConfBean getInputConf(){
        ConfBean confBean = new ConfBean();
        confBean.setDb((String)dbComboBox.getSelectedItem());
        confBean.setHost(ipTextField.getText());
        confBean.setPort(portTextField.getText());
        confBean.setDbName(dbNameTextField.getText());
        confBean.setUser(userTextField.getText());
        confBean.setPasswd(pswTextField.getText());
        confBean.setPkg(packageTextField.getText());
        confBean.setDir(pathTextField.getText());
        return confBean;
    }

    // 保存用户的输入到Preferences,以便下次获取
    public void setConfToPreferences(ConfBean confBean){
        Preferences prefs = Preferences.userRoot().node(this.getClass().getName());
        prefs.put(Constants.DB, confBean.getDb());
        prefs.put(Constants.HOST, confBean.getHost());
        prefs.put(Constants.PORT, confBean.getPort());
        prefs.put(Constants.DBNAME, confBean.getDbName());
        prefs.put(Constants.USER, confBean.getUser());
        prefs.put(Constants.PASSWD, confBean.getPasswd());
        prefs.put(Constants.PKG, confBean.getPkg());
        prefs.put(Constants.DIR, confBean.getDir());
    }

    // 从Preferences获取用户上次的输入
    public void getConfFromPreferences(){
        CommandOptions co = new CommandOptions();
        Preferences prefs = Preferences.userRoot().node(this.getClass().getName());
        dbComboBox.setSelectedItem(prefs.get(Constants.DB,co.db));
        ipTextField.setText(prefs.get(Constants.HOST,co.host));
        portTextField.setText(prefs.get(Constants.PORT,co.port));
        dbNameTextField.setText(prefs.get(Constants.DBNAME,co.dbName));
        userTextField.setText(prefs.get(Constants.USER,co.user));
        pswTextField.setText(prefs.get(Constants.PASSWD,co.passwd));
        packageTextField.setText(prefs.get(Constants.PKG,co.pkg));
        pathTextField.setText(prefs.get(Constants.DIR,co.dir));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JavabeanGenerateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JavabeanGenerateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JavabeanGenerateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JavabeanGenerateFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JavabeanGenerateFrame javabeanGenerateFrame = new JavabeanGenerateFrame();
                javabeanGenerateFrame.setVisible(true);
                javabeanGenerateFrame.getConfFromPreferences();
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel dbLabel;
    private javax.swing.JComboBox<String> dbComboBox;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JTextField ipTextField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JLabel dbNameLabel;
    private javax.swing.JTextField dbNameTextField;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userTextField;
    private javax.swing.JLabel pswLabel;
    private javax.swing.JTextField pswTextField;
    private javax.swing.JLabel packageLabel;
    private javax.swing.JTextField packageTextField;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathTextField;
    private javax.swing.JScrollPane tableNamesScrollPane;
    private javax.swing.JTable tableNamesTable;
    private MyTableModel model;
    private javax.swing.JButton queryButton;
    private javax.swing.JButton createButton;
    // End of variables declaration
}

//自定义表格模型
class MyTableModel extends AbstractTableModel {

    //单元格元素类型
    private Class cellType[] = {Boolean.class, Table.class};
    //表头
    private String title[] = {"是否选中", "表名"};
    //模拟数据
    private Object data[][] = {
    };
    final int CHECKBOX_COLUMN = 0;
    final int TABLENAME_COLUMN = 1;

    public MyTableModel() {
    }

    @Override
    public Class<?> getColumnClass(int arg0) {
        // TODO Auto-generated method stub
        return cellType[arg0];
    }

    @Override
    public String getColumnName(int arg0) {
        // TODO Auto-generated method stub
        return title[arg0];
    }

    @Override
    public int getColumnCount() {
        // TODO Auto-generated method stub
        return title.length;
    }

    @Override
    public int getRowCount() {
        // TODO Auto-generated method stub
        return data.length;
    }

    @Override
    public Object getValueAt(int r, int c) {
        if(c==TABLENAME_COLUMN){
            return ((Table)data[r][c]).getName();
        }
        return data[r][c];
    }

    //重写setValueAt方法
    public void setValueAt(Object value, int r, int c) {
        data[r][c] = value;
        this.fireTableCellUpdated(r, c);
    }

    //重写isCellEditable方法
    public boolean isCellEditable(int r, int c) {
        if (c == 0) {
            return true;
        }
        return false;
    }

    public Object[][] getData() {
        return data;
    }

    public void setData(Object[][] data) {
        this.data = data;
    }

    //自定义方法，获取被选择的表名
    public java.util.List<Table> getSelectedTables(){
        int rowCount = this.getRowCount();
        java.util.List<Table> selectedTablesList = new ArrayList<Table>();
        for(int i=0;i<rowCount;i++){
            if((Boolean)this.getValueAt(i,CHECKBOX_COLUMN)){
                selectedTablesList.add((Table)this.getData()[i][TABLENAME_COLUMN]);
            }
        }
        return selectedTablesList;
    }
}

class CheckHeaderCellRenderer implements TableCellRenderer {
    MyTableModel tableModel;
    JTableHeader tableHeader;
    final JCheckBox selectBox;
    final int CHECKBOX_COLUMN = 0;

    public CheckHeaderCellRenderer(final JTable table) {
        this.tableModel = (MyTableModel) table.getModel();
        this.tableHeader = table.getTableHeader();
        selectBox = new JCheckBox("(全选)"+tableModel.getColumnName(table.getColumnCount() - 1));
        selectBox.setSelected(false);
        tableHeader.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() > 0) {
                    // 获得选中列
                    int selectColumn = tableHeader.columnAtPoint(e.getPoint());
                    if (selectColumn == table.getColumnCount() - 1) {
                        boolean value = !selectBox.isSelected();
                        selectBox.setSelected(value);
                        for (int i = 0; i < table.getRowCount(); i++) {
                            table.setValueAt(value, i, CHECKBOX_COLUMN);
                        }
                        tableHeader.repaint();
                    }
                }
            }
        });
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
                                                   int row, int column) {
        String valueStr = (String) value;
        JLabel label = new JLabel(valueStr);
        label.setHorizontalAlignment(SwingConstants.CENTER); // 表头标签剧中
        selectBox.setHorizontalAlignment(SwingConstants.CENTER);// 表头标签剧中
        selectBox.setBorderPainted(true);
        JComponent component = (column == table.getColumnCount() - 1) ? selectBox : label;

        component.setForeground(tableHeader.getForeground());
        component.setBackground(tableHeader.getBackground());
        component.setFont(tableHeader.getFont());
        component.setBorder(UIManager.getBorder("TableHeader.cellBorder"));
        return component;
    }

}
